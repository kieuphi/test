using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CuaHangDAL
{
	/// <summary>
	/// Strongly-typed collection for the TaiKhoan class.
	/// </summary>
    [Serializable]
	public partial class TaiKhoanCollection : ActiveList<TaiKhoan, TaiKhoanCollection>
	{	   
		public TaiKhoanCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TaiKhoanCollection</returns>
		public TaiKhoanCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TaiKhoan o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TaiKhoan table.
	/// </summary>
	[Serializable]
	public partial class TaiKhoan : ActiveRecord<TaiKhoan>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TaiKhoan()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TaiKhoan(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TaiKhoan(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TaiKhoan(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TaiKhoan", TableType.Table, DataService.GetInstance("AdventureWorks"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaTK = new TableSchema.TableColumn(schema);
				colvarMaTK.ColumnName = "MaTK";
				colvarMaTK.DataType = DbType.Int32;
				colvarMaTK.MaxLength = 0;
				colvarMaTK.AutoIncrement = true;
				colvarMaTK.IsNullable = false;
				colvarMaTK.IsPrimaryKey = true;
				colvarMaTK.IsForeignKey = false;
				colvarMaTK.IsReadOnly = false;
				colvarMaTK.DefaultSetting = @"";
				colvarMaTK.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaTK);
				
				TableSchema.TableColumn colvarTenTK = new TableSchema.TableColumn(schema);
				colvarTenTK.ColumnName = "TenTK";
				colvarTenTK.DataType = DbType.AnsiString;
				colvarTenTK.MaxLength = 50;
				colvarTenTK.AutoIncrement = false;
				colvarTenTK.IsNullable = true;
				colvarTenTK.IsPrimaryKey = false;
				colvarTenTK.IsForeignKey = false;
				colvarTenTK.IsReadOnly = false;
				colvarTenTK.DefaultSetting = @"";
				colvarTenTK.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenTK);
				
				TableSchema.TableColumn colvarMatKhau = new TableSchema.TableColumn(schema);
				colvarMatKhau.ColumnName = "MatKhau";
				colvarMatKhau.DataType = DbType.AnsiString;
				colvarMatKhau.MaxLength = 50;
				colvarMatKhau.AutoIncrement = false;
				colvarMatKhau.IsNullable = true;
				colvarMatKhau.IsPrimaryKey = false;
				colvarMatKhau.IsForeignKey = false;
				colvarMatKhau.IsReadOnly = false;
				colvarMatKhau.DefaultSetting = @"";
				colvarMatKhau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMatKhau);
				
				TableSchema.TableColumn colvarLoaitk = new TableSchema.TableColumn(schema);
				colvarLoaitk.ColumnName = "loaitk";
				colvarLoaitk.DataType = DbType.AnsiString;
				colvarLoaitk.MaxLength = 50;
				colvarLoaitk.AutoIncrement = false;
				colvarLoaitk.IsNullable = true;
				colvarLoaitk.IsPrimaryKey = false;
				colvarLoaitk.IsForeignKey = false;
				colvarLoaitk.IsReadOnly = false;
				colvarLoaitk.DefaultSetting = @"";
				colvarLoaitk.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoaitk);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "status";
				colvarStatus.DataType = DbType.String;
				colvarStatus.MaxLength = 50;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				
						colvarStatus.DefaultSetting = @"('trong')";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarNgaycapnhap = new TableSchema.TableColumn(schema);
				colvarNgaycapnhap.ColumnName = "ngaycapnhap";
				colvarNgaycapnhap.DataType = DbType.DateTime;
				colvarNgaycapnhap.MaxLength = 0;
				colvarNgaycapnhap.AutoIncrement = false;
				colvarNgaycapnhap.IsNullable = true;
				colvarNgaycapnhap.IsPrimaryKey = false;
				colvarNgaycapnhap.IsForeignKey = false;
				colvarNgaycapnhap.IsReadOnly = false;
				colvarNgaycapnhap.DefaultSetting = @"";
				colvarNgaycapnhap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaycapnhap);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["AdventureWorks"].AddSchema("TaiKhoan",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaTK")]
		[Bindable(true)]
		public int MaTK 
		{
			get { return GetColumnValue<int>(Columns.MaTK); }
			set { SetColumnValue(Columns.MaTK, value); }
		}
		  
		[XmlAttribute("TenTK")]
		[Bindable(true)]
		public string TenTK 
		{
			get { return GetColumnValue<string>(Columns.TenTK); }
			set { SetColumnValue(Columns.TenTK, value); }
		}
		  
		[XmlAttribute("MatKhau")]
		[Bindable(true)]
		public string MatKhau 
		{
			get { return GetColumnValue<string>(Columns.MatKhau); }
			set { SetColumnValue(Columns.MatKhau, value); }
		}
		  
		[XmlAttribute("Loaitk")]
		[Bindable(true)]
		public string Loaitk 
		{
			get { return GetColumnValue<string>(Columns.Loaitk); }
			set { SetColumnValue(Columns.Loaitk, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public string Status 
		{
			get { return GetColumnValue<string>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("Ngaycapnhap")]
		[Bindable(true)]
		public DateTime? Ngaycapnhap 
		{
			get { return GetColumnValue<DateTime?>(Columns.Ngaycapnhap); }
			set { SetColumnValue(Columns.Ngaycapnhap, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public CuaHangDAL.KhachHangCollection KhachHangRecords()
		{
			return new CuaHangDAL.KhachHangCollection().Where(KhachHang.Columns.MaTk, MaTK).Load();
		}
		public CuaHangDAL.NhanVienCollection NhanVienRecords()
		{
			return new CuaHangDAL.NhanVienCollection().Where(NhanVien.Columns.MaTk, MaTK).Load();
		}
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varTenTK,string varMatKhau,string varLoaitk,string varStatus,DateTime? varNgaycapnhap)
		{
			TaiKhoan item = new TaiKhoan();
			
			item.TenTK = varTenTK;
			
			item.MatKhau = varMatKhau;
			
			item.Loaitk = varLoaitk;
			
			item.Status = varStatus;
			
			item.Ngaycapnhap = varNgaycapnhap;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMaTK,string varTenTK,string varMatKhau,string varLoaitk,string varStatus,DateTime? varNgaycapnhap)
		{
			TaiKhoan item = new TaiKhoan();
			
				item.MaTK = varMaTK;
			
				item.TenTK = varTenTK;
			
				item.MatKhau = varMatKhau;
			
				item.Loaitk = varLoaitk;
			
				item.Status = varStatus;
			
				item.Ngaycapnhap = varNgaycapnhap;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaTKColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TenTKColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MatKhauColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaitkColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaycapnhapColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaTK = @"MaTK";
			 public static string TenTK = @"TenTK";
			 public static string MatKhau = @"MatKhau";
			 public static string Loaitk = @"loaitk";
			 public static string Status = @"status";
			 public static string Ngaycapnhap = @"ngaycapnhap";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
