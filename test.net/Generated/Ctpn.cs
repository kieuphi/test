using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CuaHangDAL
{
	/// <summary>
	/// Strongly-typed collection for the Ctpn class.
	/// </summary>
    [Serializable]
	public partial class CtpnCollection : ActiveList<Ctpn, CtpnCollection>
	{	   
		public CtpnCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CtpnCollection</returns>
		public CtpnCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Ctpn o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the CTPN table.
	/// </summary>
	[Serializable]
	public partial class Ctpn : ActiveRecord<Ctpn>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Ctpn()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Ctpn(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Ctpn(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Ctpn(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CTPN", TableType.Table, DataService.GetInstance("AdventureWorks"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaCTPn = new TableSchema.TableColumn(schema);
				colvarMaCTPn.ColumnName = "MaCT_PN";
				colvarMaCTPn.DataType = DbType.Int32;
				colvarMaCTPn.MaxLength = 0;
				colvarMaCTPn.AutoIncrement = true;
				colvarMaCTPn.IsNullable = false;
				colvarMaCTPn.IsPrimaryKey = true;
				colvarMaCTPn.IsForeignKey = false;
				colvarMaCTPn.IsReadOnly = false;
				colvarMaCTPn.DefaultSetting = @"";
				colvarMaCTPn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaCTPn);
				
				TableSchema.TableColumn colvarMaPN = new TableSchema.TableColumn(schema);
				colvarMaPN.ColumnName = "MaPN";
				colvarMaPN.DataType = DbType.Int32;
				colvarMaPN.MaxLength = 0;
				colvarMaPN.AutoIncrement = false;
				colvarMaPN.IsNullable = true;
				colvarMaPN.IsPrimaryKey = false;
				colvarMaPN.IsForeignKey = true;
				colvarMaPN.IsReadOnly = false;
				colvarMaPN.DefaultSetting = @"";
				
					colvarMaPN.ForeignKeyTableName = "PN";
				schema.Columns.Add(colvarMaPN);
				
				TableSchema.TableColumn colvarMaSp = new TableSchema.TableColumn(schema);
				colvarMaSp.ColumnName = "MaSp";
				colvarMaSp.DataType = DbType.Int32;
				colvarMaSp.MaxLength = 0;
				colvarMaSp.AutoIncrement = false;
				colvarMaSp.IsNullable = true;
				colvarMaSp.IsPrimaryKey = false;
				colvarMaSp.IsForeignKey = true;
				colvarMaSp.IsReadOnly = false;
				colvarMaSp.DefaultSetting = @"";
				
					colvarMaSp.ForeignKeyTableName = "SanPham";
				schema.Columns.Add(colvarMaSp);
				
				TableSchema.TableColumn colvarTenSP = new TableSchema.TableColumn(schema);
				colvarTenSP.ColumnName = "TenSP";
				colvarTenSP.DataType = DbType.String;
				colvarTenSP.MaxLength = 255;
				colvarTenSP.AutoIncrement = false;
				colvarTenSP.IsNullable = true;
				colvarTenSP.IsPrimaryKey = false;
				colvarTenSP.IsForeignKey = false;
				colvarTenSP.IsReadOnly = false;
				colvarTenSP.DefaultSetting = @"";
				colvarTenSP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenSP);
				
				TableSchema.TableColumn colvarSoLuong = new TableSchema.TableColumn(schema);
				colvarSoLuong.ColumnName = "SoLuong";
				colvarSoLuong.DataType = DbType.Int32;
				colvarSoLuong.MaxLength = 0;
				colvarSoLuong.AutoIncrement = false;
				colvarSoLuong.IsNullable = true;
				colvarSoLuong.IsPrimaryKey = false;
				colvarSoLuong.IsForeignKey = false;
				colvarSoLuong.IsReadOnly = false;
				colvarSoLuong.DefaultSetting = @"";
				colvarSoLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuong);
				
				TableSchema.TableColumn colvarDonGiaNhap = new TableSchema.TableColumn(schema);
				colvarDonGiaNhap.ColumnName = "DonGiaNhap";
				colvarDonGiaNhap.DataType = DbType.Decimal;
				colvarDonGiaNhap.MaxLength = 0;
				colvarDonGiaNhap.AutoIncrement = false;
				colvarDonGiaNhap.IsNullable = true;
				colvarDonGiaNhap.IsPrimaryKey = false;
				colvarDonGiaNhap.IsForeignKey = false;
				colvarDonGiaNhap.IsReadOnly = false;
				colvarDonGiaNhap.DefaultSetting = @"";
				colvarDonGiaNhap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGiaNhap);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["AdventureWorks"].AddSchema("CTPN",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaCTPn")]
		[Bindable(true)]
		public int MaCTPn 
		{
			get { return GetColumnValue<int>(Columns.MaCTPn); }
			set { SetColumnValue(Columns.MaCTPn, value); }
		}
		  
		[XmlAttribute("MaPN")]
		[Bindable(true)]
		public int? MaPN 
		{
			get { return GetColumnValue<int?>(Columns.MaPN); }
			set { SetColumnValue(Columns.MaPN, value); }
		}
		  
		[XmlAttribute("MaSp")]
		[Bindable(true)]
		public int? MaSp 
		{
			get { return GetColumnValue<int?>(Columns.MaSp); }
			set { SetColumnValue(Columns.MaSp, value); }
		}
		  
		[XmlAttribute("TenSP")]
		[Bindable(true)]
		public string TenSP 
		{
			get { return GetColumnValue<string>(Columns.TenSP); }
			set { SetColumnValue(Columns.TenSP, value); }
		}
		  
		[XmlAttribute("SoLuong")]
		[Bindable(true)]
		public int? SoLuong 
		{
			get { return GetColumnValue<int?>(Columns.SoLuong); }
			set { SetColumnValue(Columns.SoLuong, value); }
		}
		  
		[XmlAttribute("DonGiaNhap")]
		[Bindable(true)]
		public decimal? DonGiaNhap 
		{
			get { return GetColumnValue<decimal?>(Columns.DonGiaNhap); }
			set { SetColumnValue(Columns.DonGiaNhap, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Pn ActiveRecord object related to this Ctpn
		/// 
		/// </summary>
		public CuaHangDAL.Pn Pn
		{
			get { return CuaHangDAL.Pn.FetchByID(this.MaPN); }
			set { SetColumnValue("MaPN", value.MaPN); }
		}
		
		
		/// <summary>
		/// Returns a SanPham ActiveRecord object related to this Ctpn
		/// 
		/// </summary>
		public CuaHangDAL.SanPham SanPham
		{
			get { return CuaHangDAL.SanPham.FetchByID(this.MaSp); }
			set { SetColumnValue("MaSp", value.Masp); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varMaPN,int? varMaSp,string varTenSP,int? varSoLuong,decimal? varDonGiaNhap)
		{
			Ctpn item = new Ctpn();
			
			item.MaPN = varMaPN;
			
			item.MaSp = varMaSp;
			
			item.TenSP = varTenSP;
			
			item.SoLuong = varSoLuong;
			
			item.DonGiaNhap = varDonGiaNhap;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMaCTPn,int? varMaPN,int? varMaSp,string varTenSP,int? varSoLuong,decimal? varDonGiaNhap)
		{
			Ctpn item = new Ctpn();
			
				item.MaCTPn = varMaCTPn;
			
				item.MaPN = varMaPN;
			
				item.MaSp = varMaSp;
			
				item.TenSP = varTenSP;
			
				item.SoLuong = varSoLuong;
			
				item.DonGiaNhap = varDonGiaNhap;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaCTPnColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPNColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MaSpColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenSPColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuongColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaNhapColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaCTPn = @"MaCT_PN";
			 public static string MaPN = @"MaPN";
			 public static string MaSp = @"MaSp";
			 public static string TenSP = @"TenSP";
			 public static string SoLuong = @"SoLuong";
			 public static string DonGiaNhap = @"DonGiaNhap";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
