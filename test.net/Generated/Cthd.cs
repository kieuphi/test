using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace CuaHangDAL
{
	/// <summary>
	/// Strongly-typed collection for the Cthd class.
	/// </summary>
    [Serializable]
	public partial class CthdCollection : ActiveList<Cthd, CthdCollection>
	{	   
		public CthdCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CthdCollection</returns>
		public CthdCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Cthd o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the CTHD table.
	/// </summary>
	[Serializable]
	public partial class Cthd : ActiveRecord<Cthd>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Cthd()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Cthd(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Cthd(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Cthd(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CTHD", TableType.Table, DataService.GetInstance("AdventureWorks"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaCTHd = new TableSchema.TableColumn(schema);
				colvarMaCTHd.ColumnName = "MaCT_HD";
				colvarMaCTHd.DataType = DbType.Int32;
				colvarMaCTHd.MaxLength = 0;
				colvarMaCTHd.AutoIncrement = true;
				colvarMaCTHd.IsNullable = false;
				colvarMaCTHd.IsPrimaryKey = true;
				colvarMaCTHd.IsForeignKey = false;
				colvarMaCTHd.IsReadOnly = false;
				colvarMaCTHd.DefaultSetting = @"";
				colvarMaCTHd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaCTHd);
				
				TableSchema.TableColumn colvarMaHD = new TableSchema.TableColumn(schema);
				colvarMaHD.ColumnName = "MaHD";
				colvarMaHD.DataType = DbType.Int32;
				colvarMaHD.MaxLength = 0;
				colvarMaHD.AutoIncrement = false;
				colvarMaHD.IsNullable = true;
				colvarMaHD.IsPrimaryKey = false;
				colvarMaHD.IsForeignKey = true;
				colvarMaHD.IsReadOnly = false;
				colvarMaHD.DefaultSetting = @"";
				
					colvarMaHD.ForeignKeyTableName = "HD";
				schema.Columns.Add(colvarMaHD);
				
				TableSchema.TableColumn colvarMaSp = new TableSchema.TableColumn(schema);
				colvarMaSp.ColumnName = "MaSp";
				colvarMaSp.DataType = DbType.Int32;
				colvarMaSp.MaxLength = 0;
				colvarMaSp.AutoIncrement = false;
				colvarMaSp.IsNullable = true;
				colvarMaSp.IsPrimaryKey = false;
				colvarMaSp.IsForeignKey = true;
				colvarMaSp.IsReadOnly = false;
				colvarMaSp.DefaultSetting = @"";
				
					colvarMaSp.ForeignKeyTableName = "SanPham";
				schema.Columns.Add(colvarMaSp);
				
				TableSchema.TableColumn colvarTenSP = new TableSchema.TableColumn(schema);
				colvarTenSP.ColumnName = "TenSP";
				colvarTenSP.DataType = DbType.String;
				colvarTenSP.MaxLength = 255;
				colvarTenSP.AutoIncrement = false;
				colvarTenSP.IsNullable = true;
				colvarTenSP.IsPrimaryKey = false;
				colvarTenSP.IsForeignKey = false;
				colvarTenSP.IsReadOnly = false;
				colvarTenSP.DefaultSetting = @"";
				colvarTenSP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenSP);
				
				TableSchema.TableColumn colvarSoLuong = new TableSchema.TableColumn(schema);
				colvarSoLuong.ColumnName = "SoLuong";
				colvarSoLuong.DataType = DbType.Int32;
				colvarSoLuong.MaxLength = 0;
				colvarSoLuong.AutoIncrement = false;
				colvarSoLuong.IsNullable = true;
				colvarSoLuong.IsPrimaryKey = false;
				colvarSoLuong.IsForeignKey = false;
				colvarSoLuong.IsReadOnly = false;
				colvarSoLuong.DefaultSetting = @"";
				colvarSoLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuong);
				
				TableSchema.TableColumn colvarDonGiaBan = new TableSchema.TableColumn(schema);
				colvarDonGiaBan.ColumnName = "DonGiaBan";
				colvarDonGiaBan.DataType = DbType.Decimal;
				colvarDonGiaBan.MaxLength = 0;
				colvarDonGiaBan.AutoIncrement = false;
				colvarDonGiaBan.IsNullable = true;
				colvarDonGiaBan.IsPrimaryKey = false;
				colvarDonGiaBan.IsForeignKey = false;
				colvarDonGiaBan.IsReadOnly = false;
				colvarDonGiaBan.DefaultSetting = @"";
				colvarDonGiaBan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGiaBan);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["AdventureWorks"].AddSchema("CTHD",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaCTHd")]
		[Bindable(true)]
		public int MaCTHd 
		{
			get { return GetColumnValue<int>(Columns.MaCTHd); }
			set { SetColumnValue(Columns.MaCTHd, value); }
		}
		  
		[XmlAttribute("MaHD")]
		[Bindable(true)]
		public int? MaHD 
		{
			get { return GetColumnValue<int?>(Columns.MaHD); }
			set { SetColumnValue(Columns.MaHD, value); }
		}
		  
		[XmlAttribute("MaSp")]
		[Bindable(true)]
		public int? MaSp 
		{
			get { return GetColumnValue<int?>(Columns.MaSp); }
			set { SetColumnValue(Columns.MaSp, value); }
		}
		  
		[XmlAttribute("TenSP")]
		[Bindable(true)]
		public string TenSP 
		{
			get { return GetColumnValue<string>(Columns.TenSP); }
			set { SetColumnValue(Columns.TenSP, value); }
		}
		  
		[XmlAttribute("SoLuong")]
		[Bindable(true)]
		public int? SoLuong 
		{
			get { return GetColumnValue<int?>(Columns.SoLuong); }
			set { SetColumnValue(Columns.SoLuong, value); }
		}
		  
		[XmlAttribute("DonGiaBan")]
		[Bindable(true)]
		public decimal? DonGiaBan 
		{
			get { return GetColumnValue<decimal?>(Columns.DonGiaBan); }
			set { SetColumnValue(Columns.DonGiaBan, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a SanPham ActiveRecord object related to this Cthd
		/// 
		/// </summary>
		public CuaHangDAL.SanPham SanPham
		{
			get { return CuaHangDAL.SanPham.FetchByID(this.MaSp); }
			set { SetColumnValue("MaSp", value.Masp); }
		}
		
		
		/// <summary>
		/// Returns a Hd ActiveRecord object related to this Cthd
		/// 
		/// </summary>
		public CuaHangDAL.Hd Hd
		{
			get { return CuaHangDAL.Hd.FetchByID(this.MaHD); }
			set { SetColumnValue("MaHD", value.MaHD); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varMaHD,int? varMaSp,string varTenSP,int? varSoLuong,decimal? varDonGiaBan)
		{
			Cthd item = new Cthd();
			
			item.MaHD = varMaHD;
			
			item.MaSp = varMaSp;
			
			item.TenSP = varTenSP;
			
			item.SoLuong = varSoLuong;
			
			item.DonGiaBan = varDonGiaBan;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMaCTHd,int? varMaHD,int? varMaSp,string varTenSP,int? varSoLuong,decimal? varDonGiaBan)
		{
			Cthd item = new Cthd();
			
				item.MaCTHd = varMaCTHd;
			
				item.MaHD = varMaHD;
			
				item.MaSp = varMaSp;
			
				item.TenSP = varTenSP;
			
				item.SoLuong = varSoLuong;
			
				item.DonGiaBan = varDonGiaBan;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaCTHdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaHDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MaSpColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenSPColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuongColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaBanColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaCTHd = @"MaCT_HD";
			 public static string MaHD = @"MaHD";
			 public static string MaSp = @"MaSp";
			 public static string TenSP = @"TenSP";
			 public static string SoLuong = @"SoLuong";
			 public static string DonGiaBan = @"DonGiaBan";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
